{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GREESHRAJ PATAIRIYA\\\\Desktop\\\\Temp\\\\Kgpian_chat\\\\client\\\\src\\\\components\\\\SingleChat.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from \"@chakra-ui/react\";\nimport io from \"socket.io-client\";\nimport { ChatState } from \"../context/ChatProvider\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // If you are deploying the app, replace the value with \"https://YOUR_DEPLOYED_APPLICATION_URL\" then run \"npm run build\" to create a production build\nlet socket, selectedChatCompare;\nconst SingleChat = _ref => {\n  _s();\n  let {\n    fetchAgain,\n    setFetchAgain\n  } = _ref;\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const {\n    user,\n    selectedChat,\n    setSelectedChat,\n    notification,\n    setNotification\n  } = ChatState();\n  const toast = useToast();\n  const fetchMessages = async () => {\n    // If no chat is selected, don't do anything\n    if (!selectedChat) {\n      return;\n    }\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/message/${selectedChat._id}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      const data = await response.json();\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      setLoading(false);\n      return toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-right\",\n        variant: \"solid\"\n      });\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    fetchMessages(); // Whenever users switches chat, call the function again\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat[0]._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain); // Fetch all the chats again\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n\n    // eslint-disable-next-line\n  });\n\n  const sendMessage = async e => {\n    // Check if 'Enter' key is pressed and we have something inside 'newMessage'\n    if (e.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        setNewMessage(\"\"); // Clear message field before making API call (won't affect API call as the function is asynchronous)\n\n        const response = await fetch(\"/api/message\", {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            content: newMessage,\n            chatId: selectedChat._id\n          })\n        });\n        const data = await response.json();\n        socket.emit(\"new message\", data);\n        setNewMessage(\"\");\n        setMessages([...messages, data]); // Add new message with existing messages\n      } catch (error) {\n        return toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom-right\",\n          variant: \"solid\"\n        });\n      }\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n\n    // Typing Indicator Logic\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    let timerLength = 3000;\n    setTimeout(() => {\n      let timeNow = new Date().getTime();\n      let timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: \"3\",\n        px: \"2\",\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), !selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain,\n            fetchMessages: fetchMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: \"20\",\n          h: \"20\",\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            overflowY: \"scroll\",\n            scrollbarWidth: \"none\"\n          },\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages,\n            isTyping: isTyping\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          mt: \"3\",\n          onKeyDown: e => sendMessage(e),\n          isRequired: true,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: e => typingHandler(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: \"3\",\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"ZRrLFuW/wDFO4Pi2Wr1rpHyqH14=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["useEffect","useState","ArrowBackIcon","Box","FormControl","IconButton","Input","Spinner","Text","useToast","io","ChatState","getSender","getSenderFull","ProfileModal","UpdateGroupChatModal","ScrollableChat","ENDPOINT","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","messages","setMessages","newMessage","setNewMessage","loading","setLoading","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","user","selectedChat","setSelectedChat","notification","setNotification","toast","fetchMessages","response","fetch","_id","method","headers","Authorization","token","data","json","emit","error","title","description","status","duration","isClosable","position","variant","on","newMessageRecieved","chat","includes","sendMessage","e","key","body","JSON","stringify","content","chatId","typingHandler","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","base","md","isGroupChat","users","chatName","toUpperCase","display","flexDirection","overflowY","scrollbarWidth"],"sources":["C:/Users/GREESHRAJ PATAIRIYA/Desktop/Temp/Kgpian_chat/client/src/components/SingleChat.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  IconButton,\r\n  Input,\r\n  Spinner,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport { ChatState } from \"../context/ChatProvider\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\n\r\nconst ENDPOINT = \"http://localhost:5000\"; // If you are deploying the app, replace the value with \"https://YOUR_DEPLOYED_APPLICATION_URL\" then run \"npm run build\" to create a production build\r\nlet socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const { user, selectedChat, setSelectedChat, notification, setNotification } =\r\n    ChatState();\r\n  const toast = useToast();\r\n\r\n  const fetchMessages = async () => {\r\n    // If no chat is selected, don't do anything\r\n    if (!selectedChat) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(`/api/message/${selectedChat._id}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      });\r\n      const data = await response.json();\r\n\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      return toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: \"solid\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages(); // Whenever users switches chat, call the function again\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageRecieved.chat[0]._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain); // Fetch all the chats again\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n  });\r\n\r\n  const sendMessage = async (e) => {\r\n    // Check if 'Enter' key is pressed and we have something inside 'newMessage'\r\n    if (e.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        setNewMessage(\"\"); // Clear message field before making API call (won't affect API call as the function is asynchronous)\r\n\r\n        const response = await fetch(\"/api/message\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          }),\r\n        });\r\n        const data = await response.json();\r\n\r\n        socket.emit(\"new message\", data);\r\n        setNewMessage(\"\");\r\n        setMessages([...messages, data]); // Add new message with existing messages\r\n      } catch (error) {\r\n        return toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom-right\",\r\n          variant: \"solid\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    // Typing Indicator Logic\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n\r\n    let lastTypingTime = new Date().getTime();\r\n    let timerLength = 3000;\r\n\r\n    setTimeout(() => {\r\n      let timeNow = new Date().getTime();\r\n      let timeDiff = timeNow - lastTypingTime;\r\n\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb=\"3\"\r\n            px=\"2\"\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {!selectedChat.isGroupChat ? (\r\n              <>\r\n                {getSender(user, selectedChat.users)}\r\n                <ProfileModal user={getSenderFull(user, selectedChat.users)} />\r\n              </>\r\n            ) : (\r\n              <>\r\n                {selectedChat.chatName.toUpperCase()}\r\n                <UpdateGroupChatModal\r\n                  fetchAgain={fetchAgain}\r\n                  setFetchAgain={setFetchAgain}\r\n                  fetchMessages={fetchMessages}\r\n                />\r\n              </>\r\n            )}\r\n          </Text>\r\n\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w=\"20\"\r\n                h=\"20\"\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  overflowY: \"scroll\",\r\n                  scrollbarWidth: \"none\",\r\n                }}\r\n              >\r\n                <ScrollableChat messages={messages} isTyping={isTyping} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl mt=\"3\" onKeyDown={(e) => sendMessage(e)} isRequired>\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={(e) => typingHandler(e)}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100%\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb=\"3\" fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}