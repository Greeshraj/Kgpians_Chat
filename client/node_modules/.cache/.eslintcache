[{"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\index.js":"1","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\App.js":"2","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\context\\ChatProvider.js":"3","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\pages\\index.js":"4","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\pages\\Home.jsx":"5","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\pages\\Chat.jsx":"6","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\index.js":"7","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\ChatBox.jsx":"8","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\ChatLoading.jsx":"9","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\ScrollableChat.jsx":"10","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\MyChats.jsx":"11","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\Authentication\\Login.jsx":"12","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\miscellaneous\\SideDrawer.jsx":"13","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\Authentication\\Signup.jsx":"14","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\SingleChat.jsx":"15","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\config\\ChatLogics.js":"16","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\miscellaneous\\GroupChatModal.jsx":"17","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\miscellaneous\\ProfileModal.jsx":"18","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\UserAvatar\\UserListItem.jsx":"19","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\miscellaneous\\UpdateGroupChatModal.jsx":"20","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\UserAvatar\\UserBadgeItem.jsx":"21"},{"size":546,"mtime":1695317192843,"results":"22","hashOfConfig":"23"},{"size":453,"mtime":1695361770370,"results":"24","hashOfConfig":"23"},{"size":1131,"mtime":1695317192843,"results":"25","hashOfConfig":"23"},{"size":86,"mtime":1695317192845,"results":"26","hashOfConfig":"23"},{"size":1386,"mtime":1695368285550,"results":"27","hashOfConfig":"23"},{"size":762,"mtime":1695317192844,"results":"28","hashOfConfig":"23"},{"size":413,"mtime":1695317192841,"results":"29","hashOfConfig":"23"},{"size":657,"mtime":1695372926363,"results":"30","hashOfConfig":"23"},{"size":504,"mtime":1695317192838,"results":"31","hashOfConfig":"23"},{"size":2704,"mtime":1695317192839,"results":"32","hashOfConfig":"23"},{"size":3294,"mtime":1695375948688,"results":"33","hashOfConfig":"23"},{"size":3877,"mtime":1695369268181,"results":"34","hashOfConfig":"23"},{"size":7100,"mtime":1695376120926,"results":"35","hashOfConfig":"23"},{"size":7320,"mtime":1695371966491,"results":"36","hashOfConfig":"23"},{"size":7795,"mtime":1695534853650,"results":"37","hashOfConfig":"23"},{"size":1894,"mtime":1695317192842,"results":"38","hashOfConfig":"23"},{"size":5431,"mtime":1695365850867,"results":"39","hashOfConfig":"23"},{"size":1896,"mtime":1695317192841,"results":"40","hashOfConfig":"23"},{"size":802,"mtime":1695317192841,"results":"41","hashOfConfig":"23"},{"size":8224,"mtime":1695317192842,"results":"42","hashOfConfig":"23"},{"size":490,"mtime":1695317192839,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1y80lyj",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\index.js",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\App.js",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\context\\ChatProvider.js",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\pages\\index.js",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\pages\\Home.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\pages\\Chat.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\index.js",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\ChatBox.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\ChatLoading.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\ScrollableChat.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\MyChats.jsx",["111","112","113"],["114"],"import { useEffect, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Stack,\r\n  Text,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { ChatState } from \"../context/ChatProvider\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n  const toast = useToast();\r\n  const { onClose } = useDisclosure();\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const response = await fetch(`/api/chat`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      });\r\n      const data = await response.json();\r\n\r\n      setChats(data);\r\n      onClose(); // Close the side drawer\r\n    } catch (error) {\r\n      return toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n        variant: \"solid\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        display=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        {/* <GroupChatModal>\r\n          <Button\r\n            display=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal> */}\r\n      </Box>\r\n\r\n      <Box\r\n        display=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\Authentication\\Login.jsx",["115"],[],"import {Button,FormControl,FormLabel,Input,InputGroup,InputRightElement,Stack,useToast} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const toast = useToast();\r\n  const navigate = useNavigate();\r\n\r\n  const [credentials, setCredentials] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const handleCredentials = (e) => {\r\n    setCredentials({ ...credentials, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n\r\n    // If email or password is missing\r\n    if (!credentials.email || !credentials.password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: \"left-accent\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"/api/user/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          email: credentials.email,\r\n          password: credentials.password,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      toast({\r\n        title: data.message,\r\n        status: !data.success ? \"error\" : \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: !data.success ? \"left-accent\" : \"solid\",\r\n      });\r\n\r\n      if (data.success) {\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n        setLoading(false);\r\n        navigate(\"/chats\");\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      return toast({\r\n        title: \"Internal server error\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: \"solid\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing=\"6\">\r\n      <Stack spacing=\"5\">\r\n        <FormControl isRequired>\r\n          <FormLabel htmlFor=\"email\">Email</FormLabel>\r\n          <Input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={credentials.email}\r\n            placeholder=\"Enter Your Email id\"\r\n            onChange={(e) => handleCredentials(e)}\r\n          />\r\n        </FormControl>\r\n      </Stack>\r\n\r\n      <Stack spacing=\"5\">\r\n        <FormControl isRequired>\r\n          <FormLabel htmlFor=\"password\">Password</FormLabel>\r\n          <InputGroup>\r\n            <InputRightElement w=\"4.5rem\">\r\n              {/* <Button h=\"1.75rem\" size=\"sm\" onClick={() => setShow(!show)}>\r\n                {show ? \"Hide\" : \"Show\"}\r\n              </Button> */}\r\n            </InputRightElement>\r\n            <Input\r\n              type={show ? \"text\" : \"password\"}\r\n              name=\"password\"\r\n              value={credentials.password}\r\n              placeholder=\"Password\"\r\n              onChange={(e) => handleCredentials(e)}\r\n            />\r\n          </InputGroup>\r\n        </FormControl>\r\n      </Stack>\r\n\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"20%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n\r\n      {/* <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setCredentials({ email: \"guest@example.com\", password: \"12345678\" });\r\n        }}\r\n      >\r\n        <i\r\n          className=\"fas fa-user-alt\"\r\n          style={{ fontSize: \"15px\", marginRight: 8 }}\r\n        /> Get Guest User Credentials\r\n      </Button> */}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\miscellaneous\\SideDrawer.jsx",["116","117","118","119"],[],"import {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerCloseButton,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  Input,\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n  Spinner,\r\n  Text,\r\n  Tooltip,\r\n  useDisclosure,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { ChatState } from \"../../context/ChatProvider\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport \"../../App.css\";\r\n\r\nconst SideDrawer = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    user,\r\n    setSelectedChat,\r\n    chats,\r\n    setChats,\r\n    notification,\r\n    setNotification,\r\n  } = ChatState();\r\n  const navigate = useNavigate();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const toast = useToast();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      return toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n        variant: \"solid\",\r\n      });\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(`/api/user?search=${search}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      });\r\n      const data = await response.json();\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      return toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n        variant: \"solid\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    try {\r\n      setLoadingChat(true);\r\n\r\n      const response = await fetch(`/api/chat`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      // If the chat already inside 'chat' state, append it\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose(); // Close the side drawer\r\n    } catch (error) {\r\n      setLoadingChat(false);\r\n      return toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n        variant: \"solid\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Chat Page UI */}\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        {/* Search User Section */}\r\n        <Tooltip label=\"Search users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\" />\r\n            <Text display={{ base: \"none\", md: \"flex\" }} paddingX=\"2.5\">\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n\r\n        {/* App Name Section */}\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Kgpian's Chat\r\n        </Text>\r\n\r\n        {/* User Profile and Bell Icon Section */}\r\n        <div>\r\n          <Menu>\r\n            {/* <MenuButton p=\"1\" className=\"notification-badge-container\">\r\n              \r\n\r\n              {notification.length > 0 && (\r\n                <span className=\"notification-badge\">\r\n                  {notification.length > 9 ? \"9+\" : notification.length}\r\n                </span>\r\n              )}\r\n            </MenuButton> */}\r\n\r\n            {/* <MenuList>\r\n              {!notification.length && <Text pl=\"2\">No New Messages</Text>}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat[0]);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat[0].chatName}`\r\n                    : `New Message from ${getSender(\r\n                        user,\r\n                        notif.chat[0].users\r\n                      )}`}\r\n                  \r\n                </MenuItem>\r\n              ))}\r\n            </MenuList> */}\r\n          </Menu>\r\n\r\n          <Menu>\r\n            <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                name={user.name}\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>\r\n              </ProfileModal>\r\n\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" isOpen={isOpen} onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader>Search Users</DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            {/* Search User */}\r\n            <Box display=\"flex\" pb=\"2\">\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr=\"2\"\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n\r\n            {/* Polulate Search Results */}\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n\r\n            {/* if the chat has been created, don't show the loading */}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideDrawer;\r\n","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\Authentication\\Signup.jsx",["120"],[],"import {Button,FormControl,FormLabel,Input,InputGroup,InputLeftElement,InputRightElement,Stack,useToast} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n  const navigate = useNavigate();\r\n\r\n  const [credentials, setCredentials] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    pic: \"\",\r\n  });\r\n\r\n  const handleCredentials = (e) => {\r\n    setCredentials({ ...credentials, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleUploadPicture = async (e) => {\r\n    setLoading(true);\r\n\r\n    if (e.target.files[0] === undefined) {\r\n      return toast({\r\n        title: \"Please select an image\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: \"left-accent\",\r\n      });\r\n    }\r\n\r\n    if (\r\n      e.target.files[0].type === \"image/jpeg\" ||\r\n      e.target.files[0].type === \"image/png\"\r\n    ) {\r\n      try {\r\n        const data = new FormData();\r\n        data.append(\"file\", e.target.files[0]); // Contains the file\r\n        data.append(\"upload_preset\", \"chat-app\"); // Upload preset in Cloudinary\r\n        data.append(\"cloud_name\", \"devcvus7v\"); // Cloud name in Cloudinary\r\n\r\n        const response = await fetch(\r\n          \"https://api.cloudinary.com/v1_1/devcvus7v/image/upload\",\r\n          {\r\n            method: \"POST\",\r\n            body: data,\r\n          }\r\n        );\r\n        const json = await response.json();\r\n\r\n        setCredentials({\r\n          ...credentials,\r\n          [e.target.name]: json.secure_url.toString(),\r\n        });\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setLoading(false);\r\n      return toast({\r\n        title: \"Please select an image\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: \"left-accent\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n\r\n    if (\r\n      !credentials.name ||\r\n      !credentials.email ||\r\n      !credentials.password ||\r\n      !credentials.confirmPassword\r\n    ) {\r\n      setLoading(false);\r\n      return toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: \"left-accent\",\r\n      });\r\n    }\r\n\r\n    if (credentials.password !== credentials.confirmPassword) {\r\n      setLoading(false);\r\n      return toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: \"left-accent\",\r\n      });\r\n    }\r\n\r\n  \r\n    try {\r\n      const response = await fetch(\"/api/user\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: credentials.name,\r\n          email: credentials.email,\r\n          password: credentials.password,\r\n          pic: credentials.pic,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      toast({\r\n        title: data.message,\r\n        status: !data.success ? \"error\" : \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: !data.success ? \"left-accent\" : \"solid\",\r\n      });\r\n\r\n      if (data.success) {\r\n        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n        setLoading(false);\r\n        navigate(\"/chats\");\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      return toast({\r\n        title: \"Internal server error\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-right\",\r\n        variant: \"solid\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Stack spacing=\"6\">\r\n      <Stack spacing=\"5\">\r\n        <FormControl isRequired id=\"name\">\r\n          <FormLabel htmlFor=\"name\">Name</FormLabel>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={credentials.name}\r\n            placeholder=\"Enter Your Name\"\r\n            onChange={(e) => handleCredentials(e)}\r\n          />\r\n        </FormControl>\r\n      </Stack>\r\n\r\n      <Stack spacing=\"5\">\r\n        <FormControl isRequired id=\"email\">\r\n          <FormLabel htmlFor=\"email\">Email</FormLabel>\r\n          <Input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={credentials.email}\r\n            placeholder=\"Enter Your Email\"\r\n            onChange={(e) => handleCredentials(e)}\r\n          />\r\n        </FormControl>\r\n      </Stack>\r\n\r\n      <Stack spacing=\"5\">\r\n        <FormControl isRequired id=\"password\">\r\n          <FormLabel htmlFor=\"password\">Password</FormLabel>\r\n          <InputGroup>\r\n            <InputRightElement w=\"4.5rem\">\r\n              \r\n            </InputRightElement>\r\n            <Input\r\n              type={show ? \"text\" : \"password\"}\r\n              name=\"password\"\r\n              value={credentials.password}\r\n              placeholder=\"Password\"\r\n              onChange={(e) => handleCredentials(e)}\r\n            />\r\n          </InputGroup>\r\n        </FormControl>\r\n      </Stack>\r\n\r\n      <Stack spacing=\"5\">\r\n        <FormControl isRequired id=\"confirmPassword\">\r\n          <FormLabel htmlFor=\"confirmPassword\">Confirm Password</FormLabel>\r\n          <InputGroup>\r\n            <InputRightElement w=\"4.5rem\">\r\n               \r\n            </InputRightElement>\r\n            <Input\r\n              type={show ? \"text\" : \"password\"}\r\n              name=\"confirmPassword\"\r\n              value={credentials.confirmPassword}\r\n              placeholder=\"Confirm Password\"\r\n              onChange={(e) => handleCredentials(e)}\r\n            />\r\n          </InputGroup>\r\n        </FormControl>\r\n      </Stack>\r\n\r\n      <Stack spacing=\"5\">\r\n        <FormControl id=\"pic\">\r\n          <FormLabel htmlFor=\"pic\">Upload your Picture</FormLabel>\r\n\r\n          <InputGroup>\r\n            <InputLeftElement pointerEvents=\"none\">\r\n              <i className=\"fas fa-folder-open\" />\r\n            </InputLeftElement>\r\n\r\n            <Input\r\n              type=\"file\"\r\n              name=\"pic\"\r\n              accept=\"image/*\"\r\n              isInvalid={true}\r\n              errorBorderColor=\"#eaafc8\"\r\n              sx={{\r\n                \"::file-selector-button\": {\r\n                  height: 10,\r\n                  padding: 0,\r\n                  mr: 4,\r\n                  background: \"none\",\r\n                  border: \"none\",\r\n                  fontWeight: \"bold\",\r\n                },\r\n              }}\r\n              onChange={(e) => handleUploadPicture(e)}\r\n            />\r\n          </InputGroup>\r\n        </FormControl>\r\n      </Stack>\r\n\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"20%\"\r\n       \r\n        style={{ marginTop: 15 }}\r\n        onClick={() => submitHandler()}\r\n        isLoading={loading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\SingleChat.jsx",[],["121","122"],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\config\\ChatLogics.js",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\miscellaneous\\GroupChatModal.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\miscellaneous\\ProfileModal.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\UserAvatar\\UserListItem.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\miscellaneous\\UpdateGroupChatModal.jsx",[],[],"C:\\Users\\GREESHRAJ PATAIRIYA\\Desktop\\Temp\\Kgpian_chat\\client\\src\\components\\UserAvatar\\UserBadgeItem.jsx",[],[],{"ruleId":"123","severity":1,"message":"124","line":4,"column":3,"nodeType":"125","messageId":"126","endLine":4,"endColumn":9},{"ruleId":"123","severity":1,"message":"127","line":10,"column":10,"nodeType":"125","messageId":"126","endLine":10,"endColumn":17},{"ruleId":"123","severity":1,"message":"128","line":15,"column":8,"nodeType":"125","messageId":"126","endLine":15,"endColumn":22},{"ruleId":"129","severity":1,"message":"130","line":53,"column":6,"nodeType":"131","endLine":53,"endColumn":18,"suggestions":"132","suppressions":"133"},{"ruleId":"123","severity":1,"message":"134","line":6,"column":16,"nodeType":"125","messageId":"126","endLine":6,"endColumn":23},{"ruleId":"123","severity":1,"message":"135","line":23,"column":10,"nodeType":"125","messageId":"126","endLine":23,"endColumn":18},{"ruleId":"123","severity":1,"message":"136","line":31,"column":10,"nodeType":"125","messageId":"126","endLine":31,"endColumn":19},{"ruleId":"123","severity":1,"message":"137","line":45,"column":5,"nodeType":"125","messageId":"126","endLine":45,"endColumn":17},{"ruleId":"123","severity":1,"message":"138","line":46,"column":5,"nodeType":"125","messageId":"126","endLine":46,"endColumn":20},{"ruleId":"123","severity":1,"message":"134","line":6,"column":16,"nodeType":"125","messageId":"126","endLine":6,"endColumn":23},{"ruleId":"129","severity":1,"message":"139","line":79,"column":6,"nodeType":"131","endLine":79,"endColumn":8,"suggestions":"140","suppressions":"141"},{"ruleId":"129","severity":1,"message":"142","line":85,"column":6,"nodeType":"131","endLine":85,"endColumn":20,"suggestions":"143","suppressions":"144"},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'AddIcon' is defined but never used.","'GroupChatModal' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.","ArrayExpression",["145"],["146"],"'setShow' is assigned a value but never used.","'BellIcon' is defined but never used.","'getSender' is defined but never used.","'notification' is assigned a value but never used.","'setNotification' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["147"],["148"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["149"],["150"],{"desc":"151","fix":"152"},{"kind":"153","justification":"154"},{"desc":"155","fix":"156"},{"kind":"153","justification":"154"},{"desc":"157","fix":"158"},{"kind":"153","justification":"154"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"159","text":"160"},"directive","","Update the dependencies array to be: [user]",{"range":"161","text":"162"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"163","text":"164"},[1428,1440],"[fetchAgain, fetchChats]",[2482,2484],"[user]",[2669,2683],"[fetchMessages, selectedChat]"]